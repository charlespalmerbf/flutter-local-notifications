// Define a fallback for version properties if version.properties file is not found
def versionPropertiesFile = rootProject.file("android/version.properties")
def versionProperties = new Properties()

if (versionPropertiesFile.exists()) {
    versionProperties.load(new FileInputStream(versionPropertiesFile))
}

def flutterVersionCode = versionProperties.getProperty('versionCode', '1').toInteger()
def flutterVersionName = versionProperties.getProperty('versionName', '1.0')

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

// Apply Flutter-specific Gradle plugin
def flutterRoot = rootProject.file('flutter').exists() ? rootProject.file('flutter') : null
if (!flutterRoot) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 34
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    defaultConfig {
        applicationId "com.example.flutter_local_notifications"
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion 34
        versionCode flutterVersionCode
        versionName flutterVersionName
    }

    buildTypes {
        release {
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}
